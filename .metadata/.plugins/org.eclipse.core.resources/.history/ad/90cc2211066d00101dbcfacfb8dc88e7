package app.labs.ex06.mvc02.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import app.labs.ex06.mvc02.model.EmpVO;
import app.labs.ex06.mvc02.service.EmpService;

@Controller
public class EmpController {

    @Autowired
    EmpService empService;

    // 직원 수 조회 (부서 선택 가능)
    @RequestMapping(value = "/hr/count")
    public String empCount(@RequestParam(value = "deptid", required = false, defaultValue = "0") int deptId, Model model) {
        if (deptId == 0) {
            model.addAttribute("count", empService.getEmpCount());
        } else {
            model.addAttribute("count", empService.getEmpCount(deptId));
        }
        return "hr/count";
    }

    // 직원 전체 목록
    @RequestMapping(value = "/hr/list")
    public String empAlList(Model model) {
        List<EmpVO> empList = empService.getEmpList();
        model.addAttribute("empList", empList);
        return "hr/list";
    }

    // 특정 사원 정보 보기 - 정규식으로 숫자만 허용
    @RequestMapping(value = "/hr/{employeeId:\\d+}")
    public String getEmpInfo(@PathVariable int employeeId, Model model) {
        EmpVO emp = empService.getEmpInfo(employeeId);
        model.addAttribute("emp", emp);
        return "hr/view";
    }

    // 사원 등록 폼 (GET)
    @RequestMapping(value = "/hr/insert", method = RequestMethod.GET)
    public String insertEmp(Model model) {
        model.addAttribute("deptList", empService.getAllDeptID());
        model.addAttribute("jobList", empService.getAllJobID());
        model.addAttribute("managerList", empService.getAllManagerID());
        return "hr/insertform";
    }

    // 사원 등록 처리 (POST)
    @RequestMapping(value = "/hr/insert", method = RequestMethod.POST)
    public String insertEmp(EmpVO emp, RedirectAttributes redirectAttributes) {
        try {
            empService.insertEmp(emp);
            String msg = emp.getEmployeeId() + "번 사원정보가 입력되었습니다.";
            redirectAttributes.addFlashAttribute("message", msg);
        } catch (Exception ex) {
            redirectAttributes.addFlashAttribute("message", ex.getMessage());
        }
        return "redirect:/hr/list";
    }

    // 사원 수정 폼
    @RequestMapping(value = "/hr/update")
    public String updateEmp(@RequestParam("empid") int empid, Model model) {
        model.addAttribute("emp", empService.getEmpInfo(empid));
        model.addAttribute("deptList", empService.getAllDeptID());
        model.addAttribute("jobList", empService.getAllJobID());
        model.addAttribute("managerList", empService.getAllManagerID());
      
        return "hr/updateform";
    }
    
    @PostMapping("/hr/update")
    public String updateEmpPost(EmpVO emp, RedirectAttributes redirectAttributes) {
        try {
        	if (emp.getManagerId() != null && emp.getManagerId() == 0) {
        	    emp.setManagerId(null);
        	}
            empService.updateEmp(emp);
            // 수정 완료 메시지를 추가
            redirectAttributes.addFlashAttribute("message", "사원 정보가 성공적으로 수정되었습니다.");
            return "redirect:/hr/list";  // 수정 후 목록 페이지로 리다이렉트
        } catch (Exception e) {
            // 오류가 발생하면 수정 실패 메시지 추가
            redirectAttributes.addFlashAttribute("message", "사원 수정에 실패했습니다. 다시 시도해주세요.");
            return "redirect:/hr/update?empid=" + emp.getEmployeeId();  // 수정 폼으로 리다이렉트
        }
    }

 // 삭제 폼 GET
    @RequestMapping(value = "/hr/delete", method = RequestMethod.GET)
    public String deleteEmpForm(@RequestParam("empid") int empid, Model model) {
        model.addAttribute("emp", empService.getEmpInfo(empid));
        return "hr/deleteform";
    }

    // 삭제 처리 POST
    @RequestMapping(value = "/hr/delete", method = RequestMethod.POST)
    public String deleteEmp(@RequestParam("empid") Integer empid,
                            @RequestParam("email") String email,
                            RedirectAttributes redirectAttributes,
                            Model model) {
        try {
            int cnt = empService.deleteEmp(empid, email);
            if (cnt > 0) {
                redirectAttributes.addFlashAttribute("message", empid + "번 사원이 삭제되었습니다.");
                return "redirect:/hr/list";
            } else {
                model.addAttribute("message", "사원번호 또는 이메일이 일치하지 않습니다.");
                model.addAttribute("emp", empService.getEmpInfo(empid));
                return "hr/deleteform";
            }
        } catch (Exception ex) {
            redirectAttributes.addFlashAttribute("message", ex.getMessage());
            return "redirect:/hr/list";
        }
    }
}